function <chunk>( ... )
  delta = 1E-06
  bisect = function bisect
  solve = function solve
  f = function f
  solve( f, 1, 2 )
end

function bisect( f, a, b, fa, fb )
  -- multiple return
  -- label ifClause, ifClause, ifEnd
  -- local c, fc
  -- local c, fc
  local c = ( ( a + b ) / 2 )
  io[ "write" ]( n, " c=", c, " a=", a, " b=", b, "\n" )
  bfalse ( ( ( c == a ) or ( c == b ) ) or ( math[ "abs" ]( ( a - b ) ) < delta ) ) ifClause
  do -- if
    return c, ( b - a )
  end
ifClause:
  n = ( n + 1 )
  local fc = f( c )
  bfalse ( ( fa * fc ) < 0 ) ifClause
  do -- if
    return values bisect( f, a, c, fa, fc )
  end
  b ifEnd
ifClause:
  do -- else
    return values bisect( f, c, b, fc, fb )
  end
ifEnd:
  return nil
end

function solve( f, a, b )
  -- local z, e
  -- local z, e
  n = 0
  local z, e = values bisect( f, a, b, f( a ), values f( b ) )
  io[ "write" ]( values string[ "format" ]( "after %d steps, root is %.17g with error %.1e, f=%.1e\n", n, z, e, values f( z ) ) )
  return nil
end

function f( x )
  return ( ( ( ( x * x ) * x ) - x ) - 1 )
end

function <chunk>( ... )
  -- local c0, c, c
  for c0 = -20, ( 50 - 1 ), 10
    -- local c0
    io[ "write" ]( "C " )
    for c = c0, ( ( c0 + 10 ) - 1 ), 1
      -- local c
      io[ "write" ]( values string[ "format" ]( "%3.0f ", c ) )
    end
    io[ "write" ]( "\n" )
    io[ "write" ]( "F " )
    for c = c0, ( ( c0 + 10 ) - 1 ), 1
      -- local c
      f = ( ( ( 9 / 5 ) * c ) + 32 )
      io[ "write" ]( values string[ "format" ]( "%3.0f ", f ) )
    end
    io[ "write" ]( "\n\n" )
  end
end

function <chunk>( ... )
  -- local i
  for i = 0, table[ "getn" ]( arg ), 1
    -- local i
    print( i, arg[ i ] )
  end
end

function <chunk>( ... )
  -- local f
  -- local f
  local f = function x378734A
  setmetatable( getfenv(), {
    [ "__index" ] = f;
  } )
  print( a, USER, PATH )
end

function x378734A( t, i )
  -- multiple return
  return values os[ "getenv" ]( i )
end

function <chunk>( ... )
  -- local n
  Y = function x33C0D9D
  F = function x11C7A8C
  factorial = Y( F )
  test = function test
  for n = 0, 16, 1
    -- local n
    test( n )
  end
end

function x33C0D9D( g )
  -- multiple return
  -- local a
  -- local a
  local a = function x2004EEE
  return values a( function x202C666 )
end

function x2004EEE( f )
  -- multiple return
  return values f( f )
end

function x202C666( f )
  -- multiple return
  -- upval g
  return values g( function x218F99C )
end

function x218F99C( x )
  -- multiple return
  -- upval f
  -- local c
  -- local c
  local c = f( f )
  return values c( x )
end

function x11C7A8C( f )
  return function x2E0C681
end

function x2E0C681( n )
  -- label ifClause, ifEnd
  -- upval f
  bfalse ( n == 0 ) ifClause
  do -- if
    return 1
  end
  b ifEnd
ifClause:
  do -- else
    return ( n * f( ( n - 1 ) ) )
  end
ifEnd:
  return nil
end

function test( x )
  io[ "write" ]( x, "! = ", factorial( x ), "\n" )
  return nil
end

function <chunk>( ... )
  fib = function fib
  cache = function cache
  test = function test
  n = ( arg[ 1 ] or 24 )
  n = tonumber( n )
  print( "", "n", "value", "time", "evals" )
  test( "plain", fib )
  fib = cache( fib )
  test( "cached", fib )
end

function fib( n )
  -- label ifClause, ifEnd
  N = ( N + 1 )
  bfalse ( n < 2 ) ifClause
  do -- if
    return n
  end
  b ifEnd
ifClause:
  do -- else
    return ( fib( ( n - 1 ) ) + fib( ( n - 2 ) ) )
  end
ifEnd:
  return nil
end

function cache( f )
  -- local c
  -- local c
  local c = {
  }
  return function x33C0D9D
end

function x33C0D9D( x )
  -- label ifClause
  -- upval c, f
  -- local y
  -- local y
  local y = c[ x ]
  bfalse not y ifClause
  do -- if
    y = f( x )
    c[ x ] = y
  end
ifClause:
  return y
end

function test( s, f )
  -- local c, v, t
  -- local c, v, t
  N = 0
  local c = os[ "clock" ]()
  local v = f( n )
  local t = ( os[ "clock" ]() - c )
  print( s, n, v, t, N )
  return nil
end

function <chunk>( ... )
  -- local i
  generatefib = function generatefib
  forlist i = values generatefib( 1000 )
    -- local i
    print( i )
  end
end

function generatefib( n )
  -- multiple return
  return values coroutine[ "wrap" ]( function x33C0D9D )
end

function x33C0D9D()
  -- label whileBreak, whileContinue
  -- upval n
  -- local a, b
  -- local a, b
  local a = 1
  local b = 1
whileContinue:
  bfalse ( a <= n ) whileBreak
  do -- while
    coroutine[ "yield" ]( a )
    a, b = b, ( a + b )
  end
  b whileContinue
whileBreak:
  return nil
end

function <chunk>( ... )
  -- label whileBreak, whileContinue, ifClause, ifClause, ifClause, ifEnd
  -- local s, ok, _, l, op, g
whileContinue:
  bfalse 1 whileBreak
  do -- while
    -- local s, ok, _, l, op, g
    local s = io[ "read" ]()
    bfalse ( s == nil ) ifClause
    do -- if
      b whileBreak
    end
ifClause:
    local ok, _, l, op, g = values string[ "find" ]( s, "%[%-?(%d*)%]%s*([GS])ETGLOBAL.-;%s+(.*)$" )
    bfalse ok ifClause
    do -- if
      bfalse ( op == "S" ) ifClause
      do -- if
        op = "*"
      end
      b ifEnd
ifClause:
      do -- else
        op = ""
      end
ifEnd:
      io[ "write" ]( g, "	", l, op, "\n" )
    end
ifClause:
  end
  b whileContinue
whileBreak:
end

function <chunk>( ... )
  io[ "write" ]( "Hello world, from ", _VERSION, "!\n" )
end

function <chunk>( ... )
  -- local write
  -- local write
  local write = io[ "write" ]
  ALIVE = "?"
  DEAD = "?"
  ALIVE = "O"
  DEAD = "-"
  delay = function delay
  ARRAY2D = function ARRAY2D
  _CELLS = {
  }
  _CELLS[ "spawn" ] = function _CELLS:spawn
  _CELLS[ "evolve" ] = function _CELLS:evolve
  _CELLS[ "draw" ] = function _CELLS:draw
  CELLS = function CELLS
  HEART = {
    1;
    0;
    1;
    1;
    0;
    1;
    1;
    1;
    1;
    [ "w" ] = 3;
    [ "h" ] = 3;
  }
  GLIDER = {
    0;
    0;
    1;
    1;
    0;
    1;
    0;
    1;
    1;
    [ "w" ] = 3;
    [ "h" ] = 3;
  }
  EXPLODE = {
    0;
    1;
    0;
    1;
    1;
    1;
    1;
    0;
    1;
    0;
    1;
    0;
    [ "w" ] = 3;
    [ "h" ] = 4;
  }
  FISH = {
    0;
    1;
    1;
    1;
    1;
    1;
    0;
    0;
    0;
    1;
    0;
    0;
    0;
    0;
    1;
    1;
    0;
    0;
    1;
    0;
    [ "w" ] = 5;
    [ "h" ] = 4;
  }
  BUTTERFLY = {
    1;
    0;
    0;
    0;
    1;
    0;
    1;
    1;
    1;
    0;
    1;
    0;
    0;
    0;
    1;
    1;
    0;
    1;
    0;
    1;
    1;
    0;
    0;
    0;
    1;
    [ "w" ] = 5;
    [ "h" ] = 5;
  }
  LIFE = function LIFE
  LIFE( 40, 20 )
end

function delay()
  -- local i
  for i = 1, 10000, 1
    -- local i
  end
  return nil
end

function ARRAY2D( w, h )
  -- local t, y, x
  -- local t
  local t = {
    [ "w" ] = w;
    [ "h" ] = h;
  }
  for y = 1, h, 1
    -- local y
    t[ y ] = {
    }
    for x = 1, w, 1
      -- local x
      t[ y ][ x ] = 0
    end
  end
  return t
end

function _CELLS:spawn( self, shape, left, top )
  -- local y, x
  for y = 0, ( shape[ "h" ] - 1 ), 1
    -- local y
    for x = 0, ( shape[ "w" ] - 1 ), 1
      -- local x
      self[ ( top + y ) ][ ( left + x ) ] = shape[ ( ( ( y * shape[ "w" ] ) + x ) + 1 ) ]
    end
  end
  return nil
end

function _CELLS:evolve( self, next )
  -- label whileBreak, whileContinue, whileBreak, whileContinue
  -- local ym1, y, yp1, yi, xm1, x, xp1, xi, sum
  -- local ym1, y, yp1, yi
  local ym1 = ( self[ "h" ] - 1 )
  local y = self[ "h" ]
  local yp1 = 1
  local yi = self[ "h" ]
whileContinue:
  bfalse ( yi > 0 ) whileBreak
  do -- while
    -- local xm1, x, xp1, xi
    local xm1 = ( self[ "w" ] - 1 )
    local x = self[ "w" ]
    local xp1 = 1
    local xi = self[ "w" ]
whileContinue:
    bfalse ( xi > 0 ) whileBreak
    do -- while
      -- local sum
      local sum = ( ( ( ( ( ( ( self[ ym1 ][ xm1 ] + self[ ym1 ][ x ] ) + self[ ym1 ][ xp1 ] ) + self[ y ][ xm1 ] ) + self[ y ][ xp1 ] ) + self[ yp1 ][ xm1 ] ) + self[ yp1 ][ x ] ) + self[ yp1 ][ xp1 ] )
      next[ y ][ x ] = ( ( ( ( sum == 2 ) and self[ y ][ x ] ) or ( ( sum == 3 ) and 1 ) ) or 0 )
      xm1, x, xp1, xi = x, xp1, ( xp1 + 1 ), ( xi - 1 )
    end
    b whileContinue
whileBreak:
    ym1, y, yp1, yi = y, yp1, ( yp1 + 1 ), ( yi - 1 )
  end
  b whileContinue
whileBreak:
  return nil
end

function _CELLS:draw( self )
  -- upval write
  -- local out, y, x
  -- local out
  local out = ""
  for y = 1, self[ "h" ], 1
    -- local y
    for x = 1, self[ "w" ], 1
      -- local x
      out = ( out .. ( ( ( self[ y ][ x ] > 0 ) and ALIVE ) or DEAD ) )
    end
    out = ( out .. "\n" )
  end
  write( out )
  return nil
end

function CELLS( w, h )
  -- local c
  -- local c
  local c = ARRAY2D( w, h )
  c[ "spawn" ] = _CELLS[ "spawn" ]
  c[ "evolve" ] = _CELLS[ "evolve" ]
  c[ "draw" ] = _CELLS[ "draw" ]
  return c
end

function LIFE( w, h )
  -- label whileBreak, whileContinue, ifClause
  -- upval write
  -- local thisgen, nextgen, gen
  -- local thisgen, nextgen, gen
  local thisgen = CELLS( w, h )
  local nextgen = CELLS( w, h )
  thisgen:spawn( GLIDER, 5, 4 )
  thisgen:spawn( EXPLODE, 25, 10 )
  thisgen:spawn( FISH, 4, 12 )
  local gen = 1
  write( "[2J" )
whileContinue:
  bfalse 1 whileBreak
  do -- while
    thisgen:evolve( nextgen )
    thisgen, nextgen = nextgen, thisgen
    write( "[H" )
    thisgen:draw()
    write( "Life - generation ", gen, "\n" )
    gen = ( gen + 1 )
    bfalse ( gen > 2000 ) ifClause
    do -- if
      b whileBreak
    end
ifClause:
  end
  b whileContinue
whileBreak:
  return nil
end

function <chunk>( ... )
  assert( ( ( arg[ 1 ] != nil ) and ( arg[ 2 ] == nil ) ), "usage: lua luac.lua file.lua" )
  f = assert( values io[ "open" ]( "luac.out", "wb" ) )
  assert( values f:write( values string[ "dump" ]( values assert( values loadfile( arg[ 1 ] ) ) ) ) )
  assert( values f:close() )
end

function <chunk>( ... )
  printf = function printf
  printf( "Hello %s from %s on %s\n", ( os[ "getenv" ]( "USER" ) or "there" ), _VERSION, values os[ "date" ]() )
end

function printf( ... )
  io[ "write" ]( values string[ "format" ]( values ... ) )
  return nil
end

function <chunk>( ... )
  -- local f, g, G
  -- local f, g, G
  local f = function x33C0D9D
  local g = {
  }
  local G = getfenv()
  setmetatable( g, {
    [ "__index" ] = G;
    [ "__newindex" ] = f;
  } )
  setfenv( 1, g )
  rawset( g, "x", 3 )
  x = 2
  y = 1
end

function x33C0D9D( t, i )
  error( ( "cannot redefine global variable `" .. ( i .. "'" ) ), 2 )
  return nil
end

function <chunk>( ... )
  -- label whileBreak, whileContinue, ifClause
  -- local n
  gen = function gen
  filter = function filter
  N = ( N or 1000 )
  x = gen( N )
whileContinue:
  bfalse 1 whileBreak
  do -- while
    -- local n
    local n = x()
    bfalse ( n == nil ) ifClause
    do -- if
      b whileBreak
    end
ifClause:
    print( n )
    x = filter( n, x )
  end
  b whileContinue
whileBreak:
end

function gen( n )
  -- multiple return
  return values coroutine[ "wrap" ]( function x33C0D9D )
end

function x33C0D9D()
  -- upval n
  -- local i
  for i = 2, n, 1
    -- local i
    coroutine[ "yield" ]( i )
  end
  return nil
end

function filter( p, g )
  -- multiple return
  return values coroutine[ "wrap" ]( function x11C7A8C )
end

function x11C7A8C()
  -- label whileBreak, whileContinue, ifClause, ifClause
  -- upval g, p
  -- local n
whileContinue:
  bfalse 1 whileBreak
  do -- while
    -- local n
    local n = g()
    bfalse ( n == nil ) ifClause
    do -- if
      return nil
    end
ifClause:
    bfalse ( math[ "mod" ]( n, p ) != 0 ) ifClause
    do -- if
      coroutine[ "yield" ]( n )
    end
ifClause:
  end
  b whileContinue
whileBreak:
  return nil
end

function <chunk>( ... )
  qsort = function qsort
  selectionsort = function selectionsort
  show = function show
  testsorts = function testsorts
  x = {
    "Jan";
    "Feb";
    "Mar";
    "Apr";
    "May";
    "Jun";
    "Jul";
    "Aug";
    "Sep";
    "Oct";
    "Nov";
    "Dec";
  }
  testsorts( x )
end

function qsort( x, l, u, f )
  -- label ifClause, whileBreak, whileContinue, ifClause
  -- local m, t, i
  bfalse ( l < u ) ifClause
  do -- if
    -- local m, t, i
    local m = ( ( math[ "random" ]( ( u - ( l - 1 ) ) ) + l ) - 1 )
    x[ l ], x[ m ] = x[ m ], x[ l ]
    local t = x[ l ]
    m = l
    local i = ( l + 1 )
whileContinue:
    bfalse ( i <= u ) whileBreak
    do -- while
      bfalse f( x[ i ], t ) ifClause
      do -- if
        m = ( m + 1 )
        x[ m ], x[ i ] = x[ i ], x[ m ]
      end
ifClause:
      i = ( i + 1 )
    end
    b whileContinue
whileBreak:
    x[ l ], x[ m ] = x[ m ], x[ l ]
    qsort( x, l, ( m - 1 ), f )
    qsort( x, ( m + 1 ), u, f )
  end
ifClause:
  return nil
end

function selectionsort( x, n, f )
  -- label whileBreak, whileContinue, whileBreak, whileContinue, ifClause
  -- local i, m, j
  -- local i
  local i = 1
whileContinue:
  bfalse ( i <= n ) whileBreak
  do -- while
    -- local m, j
    local m = i
    local j = ( i + 1 )
whileContinue:
    bfalse ( j <= n ) whileBreak
    do -- while
      bfalse f( x[ j ], x[ m ] ) ifClause
      do -- if
        m = j
      end
ifClause:
      j = ( j + 1 )
    end
    b whileContinue
whileBreak:
    x[ i ], x[ m ] = x[ m ], x[ i ]
    i = ( i + 1 )
  end
  b whileContinue
whileBreak:
  return nil
end

function show( m, x )
  -- label whileBreak, whileContinue, ifClause
  -- local i
  -- local i
  io[ "write" ]( m, "\n	" )
  local i = 1
whileContinue:
  bfalse x[ i ] whileBreak
  do -- while
    io[ "write" ]( x[ i ] )
    i = ( i + 1 )
    bfalse x[ i ] ifClause
    do -- if
      io[ "write" ]( "," )
    end
ifClause:
  end
  b whileContinue
whileBreak:
  io[ "write" ]( "\n" )
  return nil
end

function testsorts( x )
  -- label whileBreak, whileContinue
  -- local n
  -- local n
  local n = 1
whileContinue:
  bfalse x[ n ] whileBreak
  do -- while
    n = ( n + 1 )
  end
  b whileContinue
whileBreak:
  n = ( n - 1 )
  show( "original", x )
  qsort( x, 1, n, function x33C0D9D )
  show( "after quicksort", x )
  selectionsort( x, n, function x11C7A8C )
  show( "after reverse selection sort", x )
  qsort( x, 1, n, function x2004EEE )
  show( "after quicksort again", x )
  return nil
end

function x33C0D9D( x, y )
  return ( x < y )
end

function x11C7A8C( x, y )
  return ( x > y )
end

function x2004EEE( x, y )
  return ( x < y )
end

function <chunk>( ... )
  -- label whileBreak, whileContinue, ifClause, ifClause
  -- local A, l, _, _, a, b
  -- local A
  local A = nil
whileContinue:
  bfalse 1 whileBreak
  do -- while
    -- local l, _, _, a, b
    local l = io[ "read" ]()
    bfalse ( l == nil ) ifClause
    do -- if
      b whileBreak
    end
ifClause:
    local _, _, a, b = values string[ "find" ]( l, "\"?([_%w]+)\"?%s*(.*)$" )
    bfalse ( a != A ) ifClause
    do -- if
      A = a
      io[ "write" ]( "\n", a, ":" )
    end
ifClause:
    io[ "write" ]( " ", b )
  end
  b whileContinue
whileBreak:
  io[ "write" ]( "\n" )
end

function <chunk>( ... )
  -- local level, hook
  -- local level, hook
  local level = 0
  local hook = function hook
  debug[ "sethook" ]( hook, "cr" )
  level = 0
end

function hook( event )
  -- label ifClause, ifClause, ifEnd, ifClause, ifClause, ifClause, ifEnd, ifEnd, ifClause
  -- upval level
  -- local t
  -- local t
  local t = debug[ "getinfo" ]( 3 )
  io[ "write" ]( level, " >>> ", values string[ "rep" ]( " ", level ) )
  bfalse ( ( t != nil ) and ( t[ "currentline" ] >= 0 ) ) ifClause
  do -- if
    io[ "write" ]( t[ "short_src" ], ":", t[ "currentline" ], " " )
  end
ifClause:
  t = debug[ "getinfo" ]( 2 )
  bfalse ( event == "call" ) ifClause
  do -- if
    level = ( level + 1 )
  end
  b ifEnd
ifClause:
  do -- else
    level = ( level - 1 )
    bfalse ( level < 0 ) ifClause
    do -- if
      level = 0
    end
ifClause:
  end
ifEnd:
  bfalse ( t[ "what" ] == "main" ) ifClause
  do -- if
    bfalse ( event == "call" ) ifClause
    do -- if
      io[ "write" ]( "begin ", t[ "short_src" ] )
    end
    b ifEnd
ifClause:
    do -- else
      io[ "write" ]( "end ", t[ "short_src" ] )
    end
ifEnd:
  end
  b ifEnd
ifClause:
  bfalse ( t[ "what" ] == "Lua" ) ifClause
  do -- elseif
    io[ "write" ]( event, " ", ( t[ "name" ] or "(Lua)" ), " <", t[ "linedefined" ], ":", t[ "short_src" ], ">" )
  end
  b ifEnd
ifClause:
  do -- else
    io[ "write" ]( event, " ", ( t[ "name" ] or "(C)" ), " [", t[ "what" ], "] " )
  end
ifEnd:
  io[ "write" ]( "\n" )
  return nil
end

function <chunk>( ... )
  -- local _tostring, tostring, log, g, set
  do -- do
    -- local _tostring, tostring, log, g, set
    local _tostring = tostring
    local tostring = function x33C0D9D
    local log = function x11C7A8C
    local g = {
    }
    local set = function x2004EEE
    setmetatable( getfenv(), {
      [ "__index" ] = g;
      [ "__newindex" ] = set;
    } )
  end
  a = 1
  b = 2
  a = 10
  b = 20
  b = nil
  b = 200
  print( a, b, c )
end

function x33C0D9D( a )
  -- multiple return
  -- label ifClause, ifEnd
  -- upval _tostring
  bfalse ( type( a ) == "string" ) ifClause
  do -- if
    return values string[ "format" ]( "%q", a )
  end
  b ifEnd
ifClause:
  do -- else
    return values _tostring( a )
  end
ifEnd:
  return nil
end

function x11C7A8C( name, old, new )
  -- label ifClause
  -- upval tostring
  -- local t, line
  -- local t, line
  local t = debug[ "getinfo" ]( 3, "Sl" )
  local line = t[ "currentline" ]
  io[ "write" ]( t[ "short_src" ] )
  bfalse ( line >= 0 ) ifClause
  do -- if
    io[ "write" ]( ":", line )
  end
ifClause:
  io[ "write" ]( ": ", name, " is now ", tostring( new ), " (was ", tostring( old ), ")", "\n" )
  return nil
end

function x2004EEE( t, name, value )
  -- upval log, g
  log( name, g[ name ], value )
  g[ name ] = value
  return nil
end

function <chunk>( ... )
  -- label whileBreak, whileContinue, ifClause
  -- local offset, s
  -- local offset
  local offset = 0
whileContinue:
  bfalse True whileBreak
  do -- while
    -- local s
    local s = io[ "read" ]( 16 )
    bfalse ( s == nil ) ifClause
    do -- if
      return nil
    end
ifClause:
    io[ "write" ]( values string[ "format" ]( "%08X  ", offset ) )
    string[ "gsub" ]( s, "(.)", function x33C0D9D )
    io[ "write" ]( values string[ "rep" ]( " ", ( 3 * ( 16 - string[ "len" ]( s ) ) ) ) )
    io[ "write" ]( " ", string[ "gsub" ]( s, "%c", "." ), "\n" )
    offset = ( offset + 16 )
  end
  b whileContinue
whileBreak:
end

function x33C0D9D( c )
  io[ "write" ]( values string[ "format" ]( "%02X ", values string[ "byte" ]( c ) ) )
  return nil
end

